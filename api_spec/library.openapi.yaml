openapi: 3.0.3
info:
  title: Library system
  version: 1.0.0
tags:
  - name: bookCatalog
    description: Operations related to browsing a book catalog
    externalDocs:
      url: https://example.com/how-to-search-for-a-book
  - name: rentals
    description: Operations related to book rentals
    externalDocs:
      url: https://example.com/how-to-rent-a-book
  - name: admin
    description: Operations available to library administrators
    externalDocs:
      url: https://example.com/admin-operations
servers:
  - url: https://library.example.com/api
    description: Public library server
  - url: https://test-library.example.com:{port}/api
    description: Test server
    variables:
      port:
        enum:
          - '443'
          - '10443'
        default: '443'
paths:
  /rented-books:
    get:
      summary: Get all rented books
      operationId: getRentedBooks
      tags: [rentals]
      security:
        - OpenID: [user]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/headers/If-None-Match'
      responses:
        200:
          $ref: '#/components/responses/rentedBooksFetched'
        304:
          $ref: '#/components/responses/notModified'
        default:
          $ref: '#/components/responses/default'
  /rented-books/{rentedBookId}:
    delete:
      summary: Return a book
      operationId: returnABook
      tags: [rentals]
      security:
        - OpenID: [user]
      parameters:
        - $ref: '#/components/parameters/rentedBookId'
        - $ref: '#/components/headers/If-Match'
      responses:
        204:
          description: book returned
        404:
          $ref: '#/components/responses/notFound'
        412:
          $ref: '#/components/responses/preconditionFailed'
        default:
          $ref: '#/components/responses/default'
  /books:
    get:
      summary: Get all books in the library
      operationId: getBooks
      tags: [bookCatalog]
      security: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/headers/If-None-Match'
      responses:
        200:
          $ref: '#/components/responses/booksFetched'
        304:
          $ref: '#/components/responses/notModified'
        default:
          $ref: '#/components/responses/default'
    post:
      summary: Add book to library
      operationId: addBook
      tags: [admin]
      security: 
        - OpenID: [admin]
        - BasicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
      responses:
        201:
          $ref: '#/components/responses/bookFetched'
        400:
          $ref: '#/components/responses/badRequest'
        default:
          $ref: '#/components/responses/default'
  /books/{bookId}:
    get:
      summary: Get book identified by `bookId`
      operationId: getBookById
      tags: [bookCatalog]
      security: []
      parameters:
        - $ref: '#/components/parameters/bookId'
        - $ref: '#/components/headers/If-None-Match'
      responses:
        200:
          $ref: '#/components/responses/bookFetched'
        304:
          $ref: '#/components/responses/notModified'
        404:
          $ref: '#/components/responses/notFound'
        default:
          $ref: '#/components/responses/default'
  /books/{bookId}/rent:
    post:
      summary: Rent a book
      operationId: rentBook
      tags: [rentals]
      security: 
        - OpenID: [user]
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        201:
          $ref: '#/components/responses/rentedBookFetched'
        400:
          $ref: '#/components/responses/badRequest'
        404:
          $ref: '#/components/responses/notFound'
        default:
          $ref: '#/components/responses/default'
  /allMediaItems:
    get:
      summary: Get all media items in the library
      operationId: getAllMediaItems
      tags: [bookCatalog]
      security: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/headers/If-None-Match'
      responses:
        200:
          $ref: '#/components/responses/allMediaItemsFetched'
        default:
          $ref: '#/components/responses/default'
components:
  schemas:
    problem:
      $ref: 'https://opensource.zalando.com/restful-api-guidelines/models/problem-1.0.1.yaml#/Problem'
    mediaItem:
      $ref: './schemas/media_item.yaml'
    book:
      $ref: './schemas/book.yaml'
    dvd:
      $ref: './schemas/dvd.yaml'
    rentedBook:
      $ref: './schemas/rented_book.yaml'
  examples:
    bookMatilda:
      $ref: './examples/book_matilda.yaml'
    bookTheCatInTheHat:
      $ref: './examples/book_the_cat_in_the_hat.yaml'
  responses:
    default:
      $ref: './responses/default.yaml'
    notFound:
      $ref: './responses/not_found.yaml'
    badRequest:
      $ref: './responses/bad_request.yaml'
    bookFetched:
      $ref: './responses/book_fetched.yaml'
    booksFetched:
      $ref: './responses/books_fetched.yaml'
    rentedBookFetched:
      $ref: './responses/rented_book_fetched.yaml'
    rentedBooksFetched:
      $ref: './responses/rented_books_fetched.yaml'
    allMediaItemsFetched:
      $ref: './responses/all_media_items_fetched.yaml'
    preconditionFailed:
      $ref: './responses/precondition_failed.yaml'
    notModified:
      $ref: './responses/not_modified.yaml'
  parameters:
    bookId:
      $ref: './parameters/book_id.yaml'
    rentedBookId:
      $ref: './parameters/rented_book_id.yaml'
    page:
      $ref: './parameters/page.yaml'
    limit:
      $ref: './parameters/limit.yaml'
    sort:
      $ref: './parameters/sort.yaml'
    filter:
      $ref: './parameters/filter.yaml'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://example.com/openid
  headers:
    ETag:
      $ref: 'https://opensource.zalando.com/restful-api-guidelines/models/headers-1.0.0.yaml#/ETag'
    If-Match:
      $ref: 'https://opensource.zalando.com/restful-api-guidelines/models/headers-1.0.0.yaml#/If-Match'
    If-None-Match:
      $ref: 'https://opensource.zalando.com/restful-api-guidelines/models/headers-1.0.0.yaml#/If-None-Match'
